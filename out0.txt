In the console, type clear and hit Enter or Return. 

This will clear the console output. 

Run the file once while the tasks are short. 

Copy and paste the terminal results (when task_duration is 0) here.

# define global variables

task_duration = 0 # TODO: increase this to 3 and see what happens

dbname = "shared.db"

# define a multi-line string to communicate with the user
success_message ="""
SUCCESS! All processes are done.
Now - increase the task duration (representing 
      the time the task has the database 
      tied up during an insert statement).
How well do the multiple, concurrent processes share a database 
when each task can take more time? 
How can we let multiple processes share a resource
without interfering with each other?
"""

# define another multi-line f-string to
# display useful information at the start of the program
# f-strings make it easy to insert variables into strings
info_message = f"""

STARTING UP.............................
It's {datetime.date.today()} at {datetime.datetime.now().strftime("%I:%M %p")}

This file is running on:    {os.name} {platform.system()} {platform.release()}
The Python version is:      {platform.python_version()}
 
The Python interpreter is at: 
 {sys.executable}

"""


# define helpful functions (bits of reusable code)

def create_table():
    # create a database connection
    conn = sqlite3.connect(dbname)
    # create a cursor to execute statements